/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package revolut

import com.fasterxml.jackson.module.kotlin.jacksonObjectMapper
import com.github.kittinunf.fuel.core.FuelError
import com.github.kittinunf.fuel.core.FuelManager
import com.github.kittinunf.fuel.httpGet
import com.github.kittinunf.fuel.httpPost
import com.github.kittinunf.fuel.jackson.responseObject
import com.github.kittinunf.result.failure
import com.github.kittinunf.result.success
import io.javalin.Javalin
import io.javalin.plugin.openapi.annotations.ContentType
import org.junit.jupiter.api.*
import org.junit.jupiter.api.Assertions.assertEquals
import org.junit.jupiter.api.MethodOrderer.OrderAnnotation
import java.util.concurrent.Callable
import java.util.concurrent.Executors
import kotlin.test.assertTrue
import kotlin.test.fail

@TestInstance(TestInstance.Lifecycle.PER_CLASS)
@TestMethodOrder(OrderAnnotation::class)
@DisplayName("Revolut account manager")

class FullTest {

    private lateinit var app: Javalin

    @BeforeAll
    fun setUp() {
        app = RevolutApp().start(8000)!!
        FuelManager.instance.basePath = "http://localhost:${app.port()}/"
    }

    @AfterAll
    fun tearDown() {
        app.stop()
    }

    private val accountApiPath = "api/account"
    private val opsApiPath = "api/operations/"
    @Test
    @Order(1)
    fun `should create 4 accounts`() {
        val accs = arrayOf(
                Account("test1", 0.0, "RUB"),
                Account("test2", 0.0, "RUB"),
                Account("test3", 0.0, "RUB"),
                Account("test4", 0.0, "RUB")
        )
        accs.forEach {
            val (_, _, result) = accountApiPath.httpPost().body(jacksonObjectMapper().writeValueAsBytes(it)).responseObject<Account>()
            result.success { returnedAcc ->
                assertTrue { returnedAcc.id > 0 }
                println(result)
            }
            result.failure { failData -> fail(failData.response.body().asString(ContentType.JSON)) }
        }
    }

    @Test
    @Order(2)
    fun `should get result for existing account`() {
        val (_, _, result) = "$accountApiPath/1".httpGet().responseObject<Account>()
        result.success {
            assertTrue { it.id > 0 }
            println(it)
        }
        result.failure {
            fail(it.response.body().asString(ContentType.JSON))
        }
    }

    @Test
    @Order(3)
    fun `should fail non-existing account`() {
        val (_, _, result) = "$accountApiPath/100".httpGet().responseObject<Account>()
        result.success {
            fail("")
        }
        result.failure {
            println(it.response.body().asString(ContentType.JSON))
        }
    }

    @Test
    @Order(3)
    fun `should fail creating accounts`() {
        val accs = arrayOf(
                Account("test1", 1.0, "RUB"),
                Account("test2", 0.1, "RUB"),
                Account("test3", -1.0, "RUB"),
                Account("test4", -0.1, "RUB")
        )
        accs.forEach { acc ->
            val (_, resp, result) = accountApiPath.httpPost().body(jacksonObjectMapper().writeValueAsBytes(acc)).response()
            result.success {
                fail("")
            }
            result.failure {
                println(it.response.body().asString(ContentType.JSON))
            }
        }
    }

    @Test
    @Order(4)
    fun `should return all accounts`() {
        val (_, _, result) = accountApiPath.httpGet().responseObject<Array<Account>>()
        result.success { arrayOfAccounts ->
            arrayOfAccounts.forEach { println(it) }
        }
        result.failure {
            fail(it.response.body().asString(ContentType.JSON))
        }
    }

    @Test
    @Order(4)
    fun `should process all concurrent opening operations correctly`() {

        sendOperationsInParallel(openingOperations, { returnedOp ->
            println(returnedOp)
            assertEquals(OperationState.Accepted, returnedOp.state)

        }, {
            fail(it.message)
        }, 1)

        val (_, _, result) = accountApiPath.httpGet().responseObject<Array<Account>>()
        result.success { arrayOfAccounts ->
            arrayOfAccounts.forEach {
                println(it)
                assertEquals(100.0, it.balance)
            }

        }
        result.failure {
            fail(it.response.body().asString(ContentType.JSON))
        }
    }

    private val openingOperations = arrayOf(
            Operation(1, 1, 100.0, operationType = OperationType.Opening),
            Operation(2, 2, 100.0, operationType = OperationType.Opening),
            Operation(3, 3, 100.0, operationType = OperationType.Opening),
            Operation(4, 4, 100.0, operationType = OperationType.Opening)

    )

    @Test
    @Order(5)
    fun `should fail all concurrent opening operations`() {

        sendOperationsInParallel(openingOperations, { returnedOp ->
            assertEquals(OperationState.Rejected, returnedOp.state)
            println(returnedOp)
        }, {
            println(it.response.body().asString(ContentType.JSON))
        }, 1)
    }

    @Test
    @Order(6)
    fun `should process all concurrent operations correctly`() {
        val amount = 5.0
        val ops = arrayOf(
                Operation(2, 1, amount),
                Operation(3, 2, amount),
                Operation(1, 3, amount)

        )
        sendOperationsInParallel(ops, { returnedOp ->
            assertEquals(OperationState.Accepted, returnedOp.state)
            println(returnedOp)
        }, {
            fail(it.message)
        }, 100)

        val (_, _, result) = accountApiPath.httpGet().responseObject<Array<Account>>()
        result.success { arrayOfAccounts ->
            arrayOfAccounts.forEach {
                println(it)
                assertEquals(100.0, it.balance)
            }

        }
        result.failure {
            fail(it.response.body().asString(ContentType.JSON))
        }
    }

    @Test
    @Order(7)
    fun `should reject all operations`() {
        val amount = 5.0
        val ops = arrayOf(
                Operation(1, 1, amount),
                Operation(3, 2, amount * 1000),
                Operation(1, 3, amount - 1000),
                Operation(-1, 3, amount),
                Operation(1, -3, amount)
        )
        sendOperationsInParallel(ops, { op ->
            assertEquals(OperationState.Rejected, op.state)
            println(op.toString())
        }, {
            println(it.response.body().asString(ContentType.JSON))
        }, 100)
    }

    private fun sendOperationsInParallel(ops: Array<Operation>, onSuccess: (Operation) -> Unit, onFail: (FuelError) -> Unit, n: Int) {
        val executor = Executors.newFixedThreadPool(4)

        for (i in 1..n) {
            executor.invokeAll(ops.map { Callable { opsApiPath.httpPost().body(jacksonObjectMapper().writeValueAsBytes(it)).responseObject<Operation>() } }).forEach { future ->
                val (_, _, result) = future.get()

                result.success(onSuccess)
                result.failure(onFail)
            }
        }
    }

    @Test
    @Order(8)
    fun `get operations`() {
        for (i in 1..50) {

            val (_, _, result) = (opsApiPath + i.toString()).httpGet().responseObject<Operation>()

            result.success { returnedOp ->
                assertEquals(i, returnedOp.id)
                println(returnedOp)
            }
            result.failure {
                fail(it.response.body().asString(ContentType.JSON))
            }
        }
    }
}

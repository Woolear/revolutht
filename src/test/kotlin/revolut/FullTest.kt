/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package revolut

import com.anarsoft.vmlens.concurrent.junit.ConcurrentTestRunner
import com.anarsoft.vmlens.concurrent.junit.ThreadCount
import com.fasterxml.jackson.module.kotlin.jacksonObjectMapper
import com.github.kittinunf.fuel.core.FuelError
import com.github.kittinunf.fuel.core.FuelManager
import com.github.kittinunf.fuel.httpGet
import com.github.kittinunf.fuel.httpPost
import com.github.kittinunf.fuel.jackson.responseObject
import com.github.kittinunf.result.failure
import com.github.kittinunf.result.success
import io.javalin.Javalin
import org.junit.jupiter.api.*
import org.junit.jupiter.api.Assertions.assertEquals
import org.junit.jupiter.api.MethodOrderer.OrderAnnotation
import org.junit.runner.RunWith
import java.time.Instant
import java.util.concurrent.Callable
import java.util.concurrent.Executors
import java.util.concurrent.Future
import kotlin.random.Random
import kotlin.test.assertNull
import kotlin.test.assertTrue
import kotlin.test.fail

@TestInstance(TestInstance.Lifecycle.PER_CLASS)
@TestMethodOrder(OrderAnnotation::class)
@DisplayName("Revolut account manager")

class FullTest {

    private lateinit var app: Javalin

    @BeforeAll
    fun setUp() {
        app = RevolutApp().start(8000)!!
        FuelManager.instance.basePath = "http://localhost:${app.port()}/"
    }

    @AfterAll
    fun tearDown() {
        app.stop()
    }

    @Test
    @Order(1)
    fun `create account`() {
        val accs = arrayOf(
                Account("test1", 100.0, "RUB"),
                Account("test2", 100.0, "RUB"),
                Account("test3", 100.0, "RUB"),
                Account("test4", 100.0, "RUB")
        )
        accs.forEach {
            val (req, response, result) = "api/account/".httpPost().body(jacksonObjectMapper().writeValueAsBytes(it)).responseObject<Account>()
            result.success { returnedAcc ->
                assertTrue { returnedAcc.id > 0 }
                println(result)
            }
            result.failure { failData -> fail(failData.message) }
        }
    }

    @Test
    @Order(2)
    fun `should get result for existing account`() {
        val (_, _, result) = "api/account/1".httpGet().responseObject<Account>()
        result.success {
            assertTrue { it.id > 0 }
            println(it)
        }
        result.failure {
            fail(it.message)
        }
    }

    @Test
    @Order(3)
    fun `should get error for non-existing account`() {
        val (_, _, result) = "api/account/100".httpGet().responseObject<Account>()
        result.success {
            fail("")
        }
        result.failure {
            assertEquals(404, it.response.statusCode)
        }
    }

    @Test
    @Order(4)
    fun `should return all accounts`() {
        val (_, _, result) = "api/account/".httpGet().responseObject<Array<Account>>()
        result.success { arrayOfAccounts ->
            arrayOfAccounts.forEach { println(it) }
        }
        result.failure {
            assertEquals(404, it.response.statusCode)
        }
    }

    @Test
    @Order(5)
    fun `should process all concurrent operations correctly`() {
        val executor = Executors.newFixedThreadPool(4)
        val amount = 5.0
        val ops = arrayOf(
                Operation(2, 1, amount),
                Operation(3, 2, amount),
                Operation(1, 3, amount)

        )
        for (i in 0..100) {
            executor.invokeAll(ops.map { Callable { "api/operations/".httpPost().body(jacksonObjectMapper().writeValueAsBytes(it)).responseObject<Operation>() } }).reversed().forEach { future ->
                val (_, _, result) = future.get()

                result.success { returnedOp ->
                    assertEquals(OperationState.Accepted, returnedOp.state)
                }
                result.failure {
                    fail(it.message)
                }
            }
        }
        val (_, _, result) = "api/account/".httpGet().responseObject<Array<Account>>()
        result.success { arrayOfAccounts ->
            arrayOfAccounts.forEach { assertEquals(100.0, it.balance) }
        }
        result.failure {
            assertEquals(404, it.response.statusCode)
        }
    }
}